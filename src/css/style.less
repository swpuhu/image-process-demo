@import './variables.less';
@import './toolbox.less';


body {
    margin: 0;
    background-color: @backgroundColor;
    color: #fff;
    cursor: default;
    overflow: hidden;
}

canvas {
    background-color: transparent;
}




.hide {
    display: none;
}


.absolute {
    position: absolute;
}

.vertical-align {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.top {
    top: 0
}

.left {
    left: 0
}

.flex {
    display: flex;
    align-items: center;
}


.header {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    height: @headerHeight;
    border-bottom: 1px solid @borderColor;
    box-sizing: border-box;
    .menu-droplist {
        width: 100px;
        margin-top: 5px;
        border: 1px solid #2e2e2e;
        box-shadow: 1px 1px 2px 1px #000;
        background-color: @backgroundColor;
        z-index: 999999;
        .menu-item {
            &:hover {
                background-color: @iconActiveColor;
            }
        }
    }
}


.main {
    position: absolute;
    top: @headerHeight;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: -1;
    right: @rightInfoWidth;
    .drawing-board {
        font-size: 0;
        box-shadow: 0 0 5px 1px @borderColor;

        .resize-box {
            position: absolute;
            border: 1px #fff dashed;
            transform: translate(0, 0);
            .resize-point {
                position: absolute;
                width: @resizePointerSize;
                height: 10px;
                border-radius: 50%;
                background-color: @resizePointerColor;
            }

            .rotate-point {
                position: absolute;
                width: @resizePointerSize;
                height: 10px;
                border-radius: 50%;
                background-color: @rotatePointerColor;
            }

            .cut-point {
                position: absolute;
                width: @cutPointerWidth;
                // min-width: @cutPointerMinWidth;
                height: @cutPointerHeight;
                background-color: @cutPointerColor;
            }
            
            .resize-lt {
                top: 0;
                left: 0;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / -2));
                cursor: nwse-resize;
            }

            .resize-t {
                top: 0;
                left: 50%;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / -2));
                cursor: ns-resize;
            }

            .resize-rt {
                top: 0;
                right: 0;
                transform: translate(calc(@resizePointerSize / 2), calc(@resizePointerSize / -2));
                cursor: nesw-resize;
            }
            .resize-r {
                top: 50%;
                right: 0;
                transform: translate(calc(@resizePointerSize / 2), calc(@resizePointerSize / -2));
                cursor: ew-resize;
            }

            .resize-rd {
                bottom: 0;
                right: 0;
                transform: translate(calc(@resizePointerSize / 2), calc(@resizePointerSize / 2));
                cursor: nwse-resize;
            }

            .resize-d {
                bottom: 0;
                left: 50%;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / 2));
                cursor: ns-resize;

            }

            .resize-ld {
                bottom: 0;
                left: 0;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / 2));
                cursor: nesw-resize;
            }
            .resize-l {
                top: 50%;
                left: 0;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / -2));
                cursor: ew-resize;
            }
            .resize-rotate {
                top: -30px;
                left: 50%;
                transform: translate(calc(@resizePointerSize / -2), calc(@resizePointerSize / -2));
                cursor: cell;
                &::after {
                    content: '';
                    display: block;
                    width: 1px;
                    height: calc(30px - @resizePointerSize);
                    background-color: #fff;
                    transform: translate(calc(@resizePointerSize / 2), @resizePointerSize);
                }
            }
            .resize-t__cut {
                top: 0;
                left: 50%;
                transform: translate(calc(@cutPointerWidth / -2), calc(@resizePointerSize / 2 + 5px));
            }

            .resize-d__cut {
                bottom: 0;
                left: 50%;
                transform: translate(calc(@cutPointerWidth / -2), calc(@resizePointerSize / -2 - 5px));
            }

            
            .resize-l__cut {
                width: @cutPointerHeight;
                height: @cutPointerWidth;
                left: 0;
                top: 50%;
                transform: translate(calc(@resizePointerSize / 2 + 5px), calc(@cutPointerWidth / -2));
            }

            
            .resize-r__cut {
                width: @cutPointerHeight;
                height: @cutPointerWidth;
                right: 0;
                top: 50%;
                transform: translate(calc(@resizePointerSize / -2 - 5px), calc(@cutPointerWidth / -2));
            }
        }
    }
}


.info {
    position: absolute;
    top: @headerHeight;
    bottom: 0;
    right: 0;
    width: @rightInfoWidth;
    border-left: 1px solid @borderColor;

    .layer-info {
        height: 500px;
        overflow-y: auto;
        .layer-item {
            padding: 5px 0 5px 0;
            border: 1px solid transparent;
            &.active {
                .item-container {
                    background-color: @layerItemActiveColor;
                }
            }
            &.border-top {
                border-top: 1px dashed @layerItemActiveColor;
            }
            &.border-bottom {
                border-bottom: 1px dashed @layerItemActiveColor;
            }
        }
        .layer-item__title {
            flex: 1;
            padding-left: 10px;
            height: 20px;
            line-height: 20px;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    }
}


.context-menu {
    width: 120px;
    border: 1px solid @borderColor;
    padding: 5px;
    background-color: #2f2f2f;
    box-shadow: 0 0 3px 1px #000;
    overflow: hidden;
    z-index: 99999;
    &.active {
        opacity: 1;
        transition: opacity 0.5s;
    }

    &.disappear {
        opacity: 0;
        transition: opacity 0.2s;
    }
    .contextmenu-item {
        &:hover {
            background-color: @iconActiveColor;
        }
    }
}